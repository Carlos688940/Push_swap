int	find_mid_n(t_snode *s_a, int lst_ind)
{
	int	mid_n;
	int	count;
	int	min_befor;
	t_snode	*a;

	a = s_a;
	count = 0;
	min_befor = INT_MIN;
	mid_n = (get_min(a) + get_max(a)) / 2;
	while (a)
	{
		if (a->val < mid_n && min_befor < mid_n && a->val > min_befor)
			min_befor = a->val;
		if (a->val < mid_n)
			count++;
		if (count > ft_round(lst_ind / 2.0) && a->ind == lst_ind)
		{
			mid_n = min_befor;
			a = s_a;
			min_befor = INT_MIN;
			count = 0;
		}
		else
			a = a->nxt;
	}
	while (count < ft_round(get_last(s_a)->ind / 2.0))
	{
		a = s_a;
		min_befor = count;
		mid_n = (mid_n + get_max(s_a) / 2);
		while (a)
	{
		if (a->val < mid_n && min_befor < mid_n && a->val > min_befor)
			min_befor = a->val;
		if (a->val < mid_n)
			count++;
		if (count > ft_round(lst_ind / 2.0) && a->ind == lst_ind)
		{
			mid_n = min_befor;
			a = s_a;
			min_befor = INT_MIN;
			count = 0;
		}
		else
			a = a->nxt;
	}
	}
	return (mid_n);
}